@inherits BindableBase


<div class="form-group">
    <br />
    <div class="form-group" style="background: #F4ECF7;">

        <div class="form-group">
            <p><b>Properties: </b></p>
            <p>Value: @Characteristic.Value</p>
            <p>DeviceUuid: @Characteristic.DeviceUuid</p>
            <p>ServiceUuid: @Characteristic.ServiceUuid</p>
            <p>Uuid: @Characteristic.Uuid</p>
            <p>AuthenticatedSignedWrites: @Characteristic.Properties.AuthenticatedSignedWrites</p>
            <p>Broadcast: @Characteristic.Properties.Broadcast</p>
            <p>Indicate: @Characteristic.Properties.Indicate</p>
            <p>Read: @Characteristic.Properties.Read</p>
            <p>ReliableWrite: @Characteristic.Properties.ReliableWrite</p>
            <p>WritableAuxiliaries: @Characteristic.Properties.WritableAuxiliaries</p>
            <p>Write: @Characteristic.Properties.Write</p>
            <p>WriteWithoutResponse: @Characteristic.Properties.WriteWithoutResponse</p>
            <p>Notify: @Characteristic.Properties.Notify</p>
            <br />
        </div>
        <div class="form-group">
            <p><b>Methods: </b></p>

            @if (Characteristic.Properties.Read)
            {
                <p>Value: @ValueRead</p>
                <button type="button" class="btn btn-outline-primary" disabled="@IsBusy" onclick="@ReadValue">ReadValue</button>
            }

            @if (Characteristic.Properties.Write)
            {
                <label>
                    Write byte array:
                    <InputTextToByteArrayComponent @bind-Value="ValueWrite" />
                </label>
                <br />
                <button type="button" class="btn btn-outline-primary" disabled="@IsBusy" onclick="@WriteValueWithResponse">WriteValueWithResponse</button>
                <br />

                @if (Characteristic.Properties.WriteWithoutResponse)
                {
                    <button type="button" class="btn btn-outline-primary" disabled="@IsBusy" onclick="@WriteValueWithoutResponse">WriteValueWithoutResponse</button>
                    <br />
                }

                <button type="button" class="btn btn-outline-primary" disabled="@IsBusy" onclick="@WriteValue">WriteValue</button>
                <p>(p.s. Do not use it as it's obsolete, use WriteWithoutResponse instead)</p>
                <br />
            }

            @if (Characteristic.Properties.Notify)
            {
                @if (IsNotificationStarted)
                {
                    <p>Notification value: @NotificationValue</p>
                    <button type="button" class="btn btn-outline-warning" disabled="@IsBusy" onclick="@StopNotification">Stop Notification</button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" disabled="@IsBusy" onclick="@StartNotification">Start Notification</button>
                }
            }
            <br />

            <label>
                <b>Input Decriptor UUID:</b>
                <input type="text" @bind-value="DescriptorUUID" @bind-value:event="oninput" />
            </label>
            <button type="button" class="btn btn-outline-secondary" disabled="@IsBusy" onclick="@OnGetDescriptorByUUIDClicked">Get Descriptor by UUID</button>
            <button type="button" class="btn btn-outline-secondary" disabled="@IsBusy" onclick="@OnGetDescriptorsByUUIDClicked">Get Descriptors by UUID</button>
            @if (Descriptors.Any())
            {
                @foreach (var descriptor in Descriptors)
                {
                    <ShowDescriptorComponent Logs="Logs" Descriptor="descriptor" />
                }
            }
            else
            {
                <p>No desciptors here.</p>
            }
            <br />
        </div>
    </div>
</div>